import json
import os
from dotenv import load_dotenv
import logging

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not TOKEN or not ADMIN_ID:
    raise ValueError("‚õî TELEGRAM_TOKEN –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ settings.json
def load_texts():
    with open("settings.json", "r", encoding="utf-8") as f:
        return json.load(f)

texts = load_texts()

application = ApplicationBuilder().token(TOKEN).build()
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data[chat_id] = None
    keyboard = [["üá∑üá∫  –†—É—Å—Å–∫–∏–π", "üá¨üáß  English"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language"
    )
    await update.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –ø–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + –æ–ø–∏—Å–∞–Ω–∏–µ
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    lang = "ru" if "–†—É—Å—Å–∫–∏–π" in update.message.text else "en"
    user_data[chat_id] = lang

    welcome_key = f"welcome_{lang}"
    features_key = f"features_{lang}"

    await update.message.reply_text(
        texts.get(welcome_key, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
        reply_markup=ReplyKeyboardRemove()
    )
    await update.message.reply_text(texts.get(features_key, "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?"))

# –ö–æ–º–∞–Ω–¥–∞ /settext –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ settings.json
async def set_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settext –∫–ª—é—á —Ç–µ–∫—Å—Ç\n–ü—Ä–∏–º–µ—Ä: /settext welcome_ru –ü—Ä–∏–≤–µ—Ç!")
        return

    key = args[0]
    new_text = " ".join(args[1:])
    texts[key] = new_text

    with open("settings.json", "w", encoding="utf-8") as f:
        json.dump(texts, f, ensure_ascii=False, indent=2)

    await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start_handler))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üá∑üá∫  –†—É—Å—Å–∫–∏–π|üá¨üáß  English)$"), choose_language))
application.add_handler(CommandHandler("settext", set_text))

logger.info("üöÄ Bot is starting...")
application.run_polling()


