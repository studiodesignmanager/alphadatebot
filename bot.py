from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), ".env"))
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not TOKEN or not ADMIN_ID:
    raise ValueError("‚õî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏ ADMIN_ID")

application = ApplicationBuilder().token(TOKEN).build()
user_data = {}

LANGUAGE_TEXTS = {
    'ru': {
        'welcome': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –Ω–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º.\n–û–Ω –∑–∞–¥–∞—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.\n–û—Ç–≤–µ—á–∞–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–æ–≤–æ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É üíñ",
        'features': "üí° –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n\n‚Äî –ü–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É\n‚Äî –ó–∞–¥–∞—Å—Ç –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Äî –ü–æ—Å—Ç—Ä–æ–∏—Ç –±–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
    },
    'en': {
        'welcome': "üëã Welcome!\n\nThis bot will help you take the first step toward a new relationship.\nIt will ask a few simple questions to better understand your goals and expectations when looking for a partner.\nBe honest ‚Äî it's an important step toward meaningful connection üíñ",
        'features': "üí° What can this bot do?\n\n‚Äî Help you take the first step toward meeting someone\n‚Äî Ask you simple personal questions\n‚Äî Lay the foundation for future matching"
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ‚Äî —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data[chat_id] = None  # —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —è–∑—ã–∫–∞
    keyboard = [["üá∑üá∫  –†—É—Å—Å–∫–∏–π", "üá¨üáß  English"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language"
    )
    await update.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=reply_markup)

# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    lang = "ru" if "–†—É—Å—Å–∫–∏–π" in update.message.text else "en"
    user_data[chat_id] = lang
    await update.message.reply_text(
        LANGUAGE_TEXTS[lang]['welcome'],
        reply_markup=ReplyKeyboardRemove()
    )
    await update.message.reply_text(LANGUAGE_TEXTS[lang]['features'])

# –ö–æ–º–∞–Ω–¥–∞ /settings ‚Äî –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
        return

    keyboard = [
        ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"],
        ["–ó–∞–∫—Ä—ã—Ç—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def settings_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return

    text = update.message.text
    chat_id = update.message.chat_id

    if text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
        lang = user_data.get(chat_id, "ru")  # —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ {lang.upper()}:", reply_markup=ReplyKeyboardRemove())
        context.user_data["editing"] = "welcome"
    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π":
        lang = user_data.get(chat_id, "ru")
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ {lang.upper()}:", reply_markup=ReplyKeyboardRemove())
        context.user_data["editing"] = "features"
    elif text == "–ó–∞–∫—Ä—ã—Ç—å":
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.", reply_markup=ReplyKeyboardRemove())
        context.user_data.pop("editing", None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è LANGUAGE_TEXTS
async def text_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return

    chat_id = update.message.chat_id
    editing_key = context.user_data.get("editing")
    if not editing_key:
        return

    lang = user_data.get(chat_id, "ru")  # —è–∑—ã–∫
    new_text = update.message.text

    LANGUAGE_TEXTS[lang][editing_key] = new_text
    await update.message.reply_text(f"–¢–µ–∫—Å—Ç '{editing_key}' –Ω–∞ —è–∑—ã–∫–µ {lang.upper()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    context.user_data.pop("editing", None)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(CommandHandler("start", start_handler))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üá∑üá∫  –†—É—Å—Å–∫–∏–π|üá¨üáß  English)$"), choose_language))

application.add_handler(CommandHandler("settings", settings_handler))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π|–ó–∞–∫—Ä—ã—Ç—å)$"), settings_choice_handler))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_edit_handler))

logger.info("üöÄ Bot is starting...")
application.run_polling()

