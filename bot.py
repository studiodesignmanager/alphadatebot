import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TEXTS_FILE = "texts.json"

CHOOSING_LANGUAGE, ASKING_FIRST_QUESTION, CHOOSING_TEXT, TYPING_NEW_TEXT = range(4)

ADMIN_ID = 486225736  # –¢–≤–æ–π Telegram ID

def load_texts():
    try:
        with open(TEXTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        default_texts = {
            "ru": {
                "welcome_message": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –Ω–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º.\n–û—Ç–≤–µ—á–∞–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–æ–≤–æ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É üíñ",
                "first_question": "–£ –≤–∞—Å –±—ã–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Ä–∞–Ω–µ–µ?"
            },
            "en": {
                "welcome_message": "üëã Welcome!\n\nThis bot will help you take the first step toward a new relationship.\nBe honest ‚Äî it's an important step toward meaningful connection üíñ",
                "first_question": "Have you registered on international dating sites before?"
            }
        }
        with open(TEXTS_FILE, "w", encoding="utf-8") as f:
            json.dump(default_texts, f, ensure_ascii=False, indent=2)
        return default_texts

def save_texts(texts):
    with open(TEXTS_FILE, "w", encoding="utf-8") as f:
        json.dump(texts, f, ensure_ascii=False, indent=2)

texts = load_texts()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start from user {update.effective_user.id}")
    reply_keyboard = [["–†—É—Å—Å–∫–∏–π", "English"]]
    await update.message.reply_text(
        "Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CHOOSING_LANGUAGE

async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.message.text.lower()
    logger.info(f"Language chosen: {lang} by user {update.effective_user.id}")
    if lang.startswith("—Ä—É—Å"):
        context.user_data["lang"] = "ru"
    elif lang.startswith("eng"):
        context.user_data["lang"] = "en"
    else:
        await update.message.reply_text("Please choose a valid language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")
        return CHOOSING_LANGUAGE

    user_lang = context.user_data["lang"]
    user_id = update.effective_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await update.message.reply_text(texts[user_lang]["welcome_message"])
    await update.message.reply_text(texts[user_lang]["first_question"])

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    if user_id == ADMIN_ID:
        buttons = [["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]]
        await update.message.reply_text(
            "–ú–µ–Ω—é:" if user_lang == "ru" else "Menu:",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True),
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞." if user_lang == "ru" else "Please continue.",
            reply_markup=ReplyKeyboardRemove(),
        )

    # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    return ASKING_FIRST_QUESTION

async def handle_first_question_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    context.user_data["first_question_answer"] = answer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç

    user_lang = context.user_data.get("lang", "en")

    await update.message.reply_text(
        ("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é." if user_lang == "ru" else "Thanks for your answer! Use the menu if you want."),
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

async def edit_texts_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    reply_keyboard = [["–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CHOOSING_TEXT

async def choose_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_choice = update.message.text
    if text_choice == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    context.user_data["edit_choice"] = text_choice
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ –º–Ω–æ–≥–æ—è–∑—ã—á–∏—è.
    current_value = (
        texts["ru"]["welcome_message"] if text_choice == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" else texts["ru"]["first_question"]
    )
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è '{text_choice}':\n\n{current_value}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return TYPING_NEW_TEXT

async def save_new_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_text = update.message.text
    choice = context.user_data.get("edit_choice")

    if choice == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
        texts["ru"]["welcome_message"] = new_text
    elif choice == "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        texts["ru"]["first_question"] = new_text
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END

    save_texts(texts)
    await update.message.reply_text(f"–¢–µ–∫—Å—Ç '{choice}' –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def handle_settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    return await edit_texts_start(update, context)

def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise RuntimeError("Error: BOT_TOKEN environment variable is not set!")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_language)],
            ASKING_FIRST_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_first_question_response)],
            CHOOSING_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_text)],
            TYPING_NEW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
    )

    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –æ—Ç –∞–¥–º–∏–Ω–∞ –≤–Ω–µ ConversationHandler
    app.add_handler(MessageHandler(
        filters.Regex("^(–ù–∞—Å—Ç—Ä–æ–π–∫–∏)$") & filters.User(user_id=ADMIN_ID),
        handle_settings_command
    ))

    app.run_polling()

if __name__ == "__main__":
    main()




