import json
import os
from dotenv import load_dotenv
import logging

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not TOKEN or not ADMIN_ID:
    raise ValueError("‚õî TELEGRAM_TOKEN –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

SETTINGS_FILE = "settings.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    LANG_CHOOSE,
    ASK_AGE_COUNTRY,
    ASK_REGISTRATION,
    ASK_PURPOSE,
    FINAL_MESSAGE,
    ADMIN_MENU,
    ADMIN_EDIT_TEXT,
) = range(7)


def load_texts():
    default_texts = {
        "welcome_ru": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
        "registration_question_ru": "–£ –≤–∞—Å –±—ã–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö —Ä–∞–Ω–µ–µ?",
        "purpose_question_ru": "–° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è?",
        "final_message_ru": "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",

        "welcome_en": "Good day! Please write your age and country of residence",
        "registration_question_en": "Have you registered on international dating sites before?",
        "purpose_question_en": "What is the purpose of your registration?",
        "final_message_en": "Thank you! We will contact you shortly",

        "choose_language": "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
        "settings_menu_title": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)",
        "edit_prompt": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:",
        "access_denied": "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
    }
    if not os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(default_texts, f, ensure_ascii=False, indent=2)
        return default_texts
    else:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)


def save_texts(texts):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(texts, f, ensure_ascii=False, indent=2)


texts = load_texts()

application = ApplicationBuilder().token(TOKEN).build()

language_keyboard = ReplyKeyboardMarkup(
    [["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language",
)

admin_menu_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (RU)", callback_data="edit_welcome_ru"),
     InlineKeyboardButton("Edit greeting (EN)", callback_data="edit_welcome_en")],
    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (RU)", callback_data="edit_registration_question_ru"),
     InlineKeyboardButton("Edit registration question (EN)", callback_data="edit_registration_question_en")],
    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (RU)", callback_data="edit_purpose_question_ru"),
     InlineKeyboardButton("Edit purpose question (EN)", callback_data="edit_purpose_question_en")],
    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (RU)", callback_data="edit_final_message_ru"),
     InlineKeyboardButton("Edit final message (EN)", callback_data="edit_final_message_en")],
    [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="close_menu")]
])


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(texts["choose_language"], reply_markup=language_keyboard)
    context.user_data.clear()
    return LANG_CHOOSE


async def language_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    lang = "ru" if "–†—É—Å—Å–∫–∏–π" in text else "en"
    context.user_data["lang"] = lang
    context.user_data["answers"] = {}

    await update.message.reply_text(texts[f"welcome_{lang}"], reply_markup=ReplyKeyboardRemove())
    return ASK_AGE_COUNTRY


async def ask_age_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    context.user_data["answers"]["age_country"] = update.message.text

    await update.message.reply_text(texts[f"registration_question_{lang}"])
    return ASK_REGISTRATION


async def ask_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    context.user_data["answers"]["registration_question"] = update.message.text

    await update.message.reply_text(texts[f"purpose_question_{lang}"])
    return ASK_PURPOSE


async def ask_purpose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    context.user_data["answers"]["purpose_question"] = update.message.text

    await update.message.reply_text(texts[f"final_message_{lang}"])
    return FINAL_MESSAGE


async def final_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["answers"]["final_message_received"] = update.message.text

    # –û—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω—É
    answer_text = "\n".join(f"{k}: {v}" for k, v in context.user_data["answers"].items())
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å –æ—Ç @{update.effective_user.username or update.effective_user.id}:\n{answer_text}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω—É: {e}")

    await update.message.reply_text("‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
    return ConversationHandler.END


async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text(texts["access_denied"])
        return ConversationHandler.END

    await update.message.reply_text(texts["settings_menu_title"], reply_markup=admin_menu_keyboard)
    return ADMIN_MENU


async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "close_menu":
        await query.message.delete()
        return ConversationHandler.END

    context.user_data["edit_key"] = data.replace("edit_", "")
    await query.message.edit_text(texts["edit_prompt"])
    return ADMIN_EDIT_TEXT


async def admin_edit_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text(texts["access_denied"])
        return ConversationHandler.END

    new_text = update.message.text
    key = context.user_data.get("edit_key")
    if key:
        texts[key] = new_text
        save_texts(texts)
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await update.message.reply_text(texts["settings_menu_title"], reply_markup=admin_menu_keyboard)
    return ADMIN_MENU


conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start_handler)],
    states={
        LANG_CHOOSE: [MessageHandler(filters.Regex("^(üá∑üá∫ –†—É—Å—Å–∫–∏–π|üá¨üáß English)$"), language_chosen)],
        ASK_AGE_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age_country)],
        ASK_REGISTRATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_registration)],
        ASK_PURPOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_purpose)],
        FINAL_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, final_message)],
        ADMIN_MENU: [CallbackQueryHandler(admin_menu_handler)],
        ADMIN_EDIT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_edit_text)],
    },
    fallbacks=[]
)

application.add_handler(CommandHandler("settings", settings_command))
application.add_handler(conv_handler)

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("üöÄ Bot is starting...")
    application.run_polling()





